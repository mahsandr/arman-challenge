// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: segmentation/v1/segmentation.proto

package segmentationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SegmentationService_AddUserSegment_FullMethodName = "/segmentation.v1.SegmentationService/AddUserSegment"
)

// SegmentationServiceClient is the client API for SegmentationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentationServiceClient interface {
	AddUserSegment(ctx context.Context, in *AddUserSegmentRequest, opts ...grpc.CallOption) (*AddUserSegmentResponse, error)
}

type segmentationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentationServiceClient(cc grpc.ClientConnInterface) SegmentationServiceClient {
	return &segmentationServiceClient{cc}
}

func (c *segmentationServiceClient) AddUserSegment(ctx context.Context, in *AddUserSegmentRequest, opts ...grpc.CallOption) (*AddUserSegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserSegmentResponse)
	err := c.cc.Invoke(ctx, SegmentationService_AddUserSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentationServiceServer is the server API for SegmentationService service.
// All implementations must embed UnimplementedSegmentationServiceServer
// for forward compatibility
type SegmentationServiceServer interface {
	AddUserSegment(context.Context, *AddUserSegmentRequest) (*AddUserSegmentResponse, error)
	mustEmbedUnimplementedSegmentationServiceServer()
}

// UnimplementedSegmentationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSegmentationServiceServer struct {
}

func (UnimplementedSegmentationServiceServer) AddUserSegment(context.Context, *AddUserSegmentRequest) (*AddUserSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserSegment not implemented")
}
func (UnimplementedSegmentationServiceServer) mustEmbedUnimplementedSegmentationServiceServer() {}

// UnsafeSegmentationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentationServiceServer will
// result in compilation errors.
type UnsafeSegmentationServiceServer interface {
	mustEmbedUnimplementedSegmentationServiceServer()
}

func RegisterSegmentationServiceServer(s grpc.ServiceRegistrar, srv SegmentationServiceServer) {
	s.RegisterService(&SegmentationService_ServiceDesc, srv)
}

func _SegmentationService_AddUserSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentationServiceServer).AddUserSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegmentationService_AddUserSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentationServiceServer).AddUserSegment(ctx, req.(*AddUserSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SegmentationService_ServiceDesc is the grpc.ServiceDesc for SegmentationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SegmentationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "segmentation.v1.SegmentationService",
	HandlerType: (*SegmentationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserSegment",
			Handler:    _SegmentationService_AddUserSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segmentation/v1/segmentation.proto",
}
