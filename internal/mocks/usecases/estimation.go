// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/usecases/estimation.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEstimationService is a mock of EstimationService interface.
type MockEstimationService struct {
	ctrl     *gomock.Controller
	recorder *MockEstimationServiceMockRecorder
}

// MockEstimationServiceMockRecorder is the mock recorder for MockEstimationService.
type MockEstimationServiceMockRecorder struct {
	mock *MockEstimationService
}

// NewMockEstimationService creates a new mock instance.
func NewMockEstimationService(ctrl *gomock.Controller) *MockEstimationService {
	mock := &MockEstimationService{ctrl: ctrl}
	mock.recorder = &MockEstimationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstimationService) EXPECT() *MockEstimationServiceMockRecorder {
	return m.recorder
}

// GetSegmentUsersCount mocks base method.
func (m *MockEstimationService) GetSegmentUsersCount(ctx context.Context, segmentName string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentUsersCount", ctx, segmentName)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentUsersCount indicates an expected call of GetSegmentUsersCount.
func (mr *MockEstimationServiceMockRecorder) GetSegmentUsersCount(ctx, segmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentUsersCount", reflect.TypeOf((*MockEstimationService)(nil).GetSegmentUsersCount), ctx, segmentName)
}
