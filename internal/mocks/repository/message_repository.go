// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/repository/message_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageBroker is a mock of MessageBroker interface.
type MockMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBrokerMockRecorder
}

// MockMessageBrokerMockRecorder is the mock recorder for MockMessageBroker.
type MockMessageBrokerMockRecorder struct {
	mock *MockMessageBroker
}

// NewMockMessageBroker creates a new mock instance.
func NewMockMessageBroker(ctrl *gomock.Controller) *MockMessageBroker {
	mock := &MockMessageBroker{ctrl: ctrl}
	mock.recorder = &MockMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBroker) EXPECT() *MockMessageBrokerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockMessageBroker) Consume(ctx context.Context) (<-chan [][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx)
	ret0, _ := ret[0].(<-chan [][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume.
func (mr *MockMessageBrokerMockRecorder) Consume(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockMessageBroker)(nil).Consume), ctx)
}

// Produce mocks base method.
func (m *MockMessageBroker) Produce(ctx context.Context, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockMessageBrokerMockRecorder) Produce(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockMessageBroker)(nil).Produce), ctx, msg)
}
